---
- name: Mount tmpfs to /var/lib/etcd
  mount:
    path: /var/lib/etcd
    src: tmpfs
    fstype: tmpfs
    opts: size=1g
    state: mounted

- name: Prepare kubeadm config
  template:
    src: files/kubeadm_config.yaml
    dest: /tmp/kubeadm_config.yaml

- name: Initialize the Kubernetes cluster on first master
  command: kubeadm init --config /tmp/kubeadm_config.yaml --upload-certs
  register: kubeadm_init
  when: inventory_hostname == groups['k8s_control_plane'][0]
  failed_when: kubeadm_init.rc != 0

- name: Ensure /etc/kubernetes/pki directory exists
  file:
    path: /etc/kubernetes/pki
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: inventory_hostname != groups['k8s_control_plane'][0]

- name: Fetch CA certificate from k1
  fetch:
    src: /etc/kubernetes/pki/ca.crt
    dest: /tmp/ca.crt
    flat: yes
  when:
    - inventory_hostname == groups['k8s_control_plane'][0]
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] is defined
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] == 0

- name: Copy CA certificate to other nodes
  copy:
    src: /tmp/ca.crt
    dest: /etc/kubernetes/pki/ca.crt
    owner: root
    group: root
    mode: '0644'
  when:
    - inventory_hostname != groups['k8s_control_plane'][0]
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] is defined
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] == 0

- name: Fetch admin.conf from k1
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: /tmp/admin.conf
    flat: yes
  when:
    - inventory_hostname == groups['k8s_control_plane'][0]
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] is defined
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] == 0

- name: Copy admin.conf to other nodes
  copy:
    src: /tmp/admin.conf
    dest: /etc/kubernetes/admin.conf
    owner: root
    group: root
    mode: '0644'
  when:
    - inventory_hostname != groups['k8s_control_plane'][0]
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] is defined
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] == 0

- name: Set KUBECONFIG environment variable
  lineinfile:
    path: /etc/environment
    line: 'KUBECONFIG=/etc/kubernetes/admin.conf'
    create: yes
  when:
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] is defined
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] == 0

- name: Get join command for control plane nodes
  shell: |
    CERT_KEY=$(kubeadm init phase upload-certs --upload-certs --kubeconfig /etc/kubernetes/admin.conf | tail -1)
    JOIN_CMD=$(kubeadm token create --print-join-command --kubeconfig /etc/kubernetes/admin.conf)
    echo "$JOIN_CMD --control-plane --certificate-key $CERT_KEY"
  register: join_command_control_plane
  when:
    - inventory_hostname == groups['k8s_control_plane'][0]
    - kubeadm_init.rc == 0

- name: Get join command for worker nodes
  command: kubeadm token create --print-join-command --kubeconfig /etc/kubernetes/admin.conf
  register: join_command_worker
  when:
    - inventory_hostname == groups['k8s_control_plane'][0]
    - kubeadm_init.rc == 0

- name: Join other control plane nodes
  command: "{{ hostvars[groups['k8s_control_plane'][0]]['join_command_control_plane']['stdout'] }}"
  when:
    - inventory_hostname in groups['k8s_control_plane'][1:]
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] is defined
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] == 0

- name: Join worker nodes
  command: "{{ hostvars[groups['k8s_control_plane'][0]]['join_command_worker']['stdout'] }}"
  delegate_to: "{{ item }}"
  become: true
  become_user: root
  loop: "{{ groups['k8s_nodes'] }}"
  when:
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] is defined
    - hostvars[groups['k8s_control_plane'][0]]['kubeadm_init']['rc'] == 0

- name: Copy kube config to localhost
  synchronize:
    mode: pull
    src: /etc/kubernetes/admin.conf
    dest: /tmp/kube_config
  when:
    - inventory_hostname == groups['k8s_control_plane'][0]
    - kubeadm_init.rc == 0
